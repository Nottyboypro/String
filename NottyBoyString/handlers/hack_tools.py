import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from NottyBoyString.utils.fonts import TinyCapsFont

class HackTools:
    def __init__(self, db):
        self.db = db
        self.STORE_ACCOUNT = 1
    
    async def hack_tools_panel(self, query):
        """Show hack tools panel"""
        text = TinyCapsFont.bold_tiny_caps(
            "üïµÔ∏è  ú·¥Ä·¥Ñ·¥ã ·¥õ·¥è·¥è üs ·¥ò·¥Ä…¥·¥á ü\n\n"
            "·¥õ ú…™s s·¥á·¥Ñ·¥õ…™·¥è…¥ …™s “ì·¥è Ä ·¥Ä·¥Ö·¥†·¥Ä…¥·¥Ñ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ. ·¥ús·¥á ·¥°…™·¥õ ú ·¥Ñ·¥Ä·¥ú·¥õ…™·¥è…¥."
        )
        
        keyboard = [
            [InlineKeyboardButton("üíæ s·¥õ·¥è Ä·¥á ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ", callback_data="store_account"),
             InlineKeyboardButton("üëÅÔ∏è ·¥†…™·¥á·¥° ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õs", callback_data="view_accounts")],
            [InlineKeyboardButton("üîç s·¥Ñ·¥Ä…¥ ·¥ús·¥á Ä", callback_data="scan_user"),
             InlineKeyboardButton("üì°  Ä·¥á·¥Ä ü-·¥õ…™·¥ç·¥á ·¥ç·¥è…¥…™·¥õ·¥è Ä", callback_data="realtime_monitor")],
            [InlineKeyboardButton("üîô  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_back")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def store_account_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start account storage process"""
        text = TinyCapsFont.bold_tiny_caps(
            "üíæ s·¥õ·¥è Ä·¥á ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥\n\n"
            "·¥ò ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ ·¥Ö·¥Ä·¥õ·¥Ä …™…¥ ·¥õ ú·¥á “ì·¥è ü ü·¥è·¥°…™…¥…¢ “ì·¥è Ä·¥ç·¥Ä·¥õ:\n\n"
            "·¥ús·¥á Ä_…™·¥Ö|·¥ò ú·¥è…¥·¥á_…¥·¥ú·¥ç ô·¥á Ä|·¥ò·¥Äss·¥°·¥è Ä·¥Ö|·¥è·¥õ ú·¥á Ä_…™…¥“ì·¥è"
        )
        
        await update.callback_query.edit_message_text(text, parse_mode='Markdown')
        return self.STORE_ACCOUNT
    
    async def store_account_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Store account data in database"""
        account_data = update.message.text.split('|')
        
        if len(account_data) < 3:
            text = TinyCapsFont.bold_tiny_caps("‚ùå …™…¥·¥†·¥Ä ü…™·¥Ö “ì·¥è Ä·¥ç·¥Ä·¥õ. ·¥ò ü·¥á·¥Äs·¥á ·¥ús·¥á: ·¥ús·¥á Ä_…™·¥Ö|·¥ò ú·¥è…¥·¥á|·¥ò·¥Äss·¥°·¥è Ä·¥Ö")
            await update.message.reply_text(text, parse_mode='Markdown')
            return ConversationHandler.END
        
        account_info = {
            "user_id": int(account_data[0]),
            "phone": account_data[1],
            "password": account_data[2],
            "additional_info": account_data[3] if len(account_data) > 3 else "",
            "stored_by": update.effective_user.id,
            "is_active": True
        }
        
        await self.db.store_account(account_info)
        
        # Log the action
        await self.db.add_log(
            "ACCOUNT_STORED",
            update.effective_user.id,
            f"Stored account for user {account_data[0]}"
        )
        
        text = TinyCapsFont.bold_tiny_caps("‚úÖ ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ s·¥õ·¥è Ä·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è …™…¥ ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á.")
        await update.message.reply_text(text, parse_mode='Markdown')
        
        return ConversationHandler.END
